box_kurt<-ggplot(note, aes(factor(class),kurt))+geom_boxplot(aes(fill=factor(class)))
box_entropy<-ggplot(note, aes(factor(class),entropy))+geom_boxplot(aes(fill=factor(class)))
grid.arrange(box_var, box_skew, box_kurt, box_entropy, ncol=4)
library(gridExtra)
# summarize each var
summary(note)
# pairwise XY-scatterplot
pairs(~var+skew+kurt+entropy, data=note)
# boxplots
box_var<-ggplot(note, aes(factor(class),var))+geom_boxplot(aes(fill=factor(class)))
box_skew<-ggplot(note, aes(factor(class),skew))+geom_boxplot(aes(fill=factor(class)))
box_kurt<-ggplot(note, aes(factor(class),kurt))+geom_boxplot(aes(fill=factor(class)))
box_entropy<-ggplot(note, aes(factor(class),entropy))+geom_boxplot(aes(fill=factor(class)))
grid.arrange(box_var, box_skew, box_kurt, box_entropy, ncol=1)
library(gridExtra)
# summarize each var
summary(note)
# pairwise XY-scatterplot
pairs(~var+skew+kurt+entropy, data=note)
# boxplots
box_var<-ggplot(note, aes(factor(class),var))+geom_boxplot(aes(fill=factor(class)))
box_skew<-ggplot(note, aes(factor(class),skew))+geom_boxplot(aes(fill=factor(class)))
box_kurt<-ggplot(note, aes(factor(class),kurt))+geom_boxplot(aes(fill=factor(class)))
box_entropy<-ggplot(note, aes(factor(class),entropy))+geom_boxplot(aes(fill=factor(class)))
grid.arrange(box_var, box_skew, box_kurt, box_entropy, ncol=2, nrow=2)
note <- read.table("abalone.data",sep=",")
moll <- read.table("abalone.data",sep=",")
colnames(moll) <- c("sex","length","diameter","height","wweight","sweight","vweight","shell_weight","rings")
View(moll)
pairs(~sex+length+diameter+height+wweight+sweight+vweight+shell_weight+rings, data=moll)
install.packages("GGally")
summary(moll)
library(GGally)
data(moll, package="reshape")
require(GGally)
data(moll, package="reshape")
ggpairs(data=moll)
ggpairs(data=moll, colour = "rings")
ggpairs(data=moll, columns=c(9,1:3) colour = "rings")
ggpairs(data=moll, columns=c(9,1:3), colour = "rings")
ggpairs(data=moll, columns=c(9,1), colour = "rings")
ggpairs(data=moll, columns=c(9,1), colour = "rings")
ggpairs(data=moll, columns=c(9,1), mapping=ggplot2::aes(colour = rings))
ggpairs(data=moll, columns=c(9,1), mapping = aes(color = Rings))
ggpairs(data=moll, columns=c(9,1), mapping = aes(color = moll$Rings))
ggpairs(data=moll, columns=c(9,1))
ggpairs(data=moll, columns=c(9,1), title="Sex")
pairs(sex+length+diameter+height+wweight+sweight+vweight+shell_weight+rings)
pairs(sex+length+diameter+height+wweight+sweight+vweight+shell_weight+rings, data=moll)
pairs(~sex+length+diameter+height+wweight+sweight+vweight+shell_weight+rings, data=moll)
pairs(~length+diameter+height+wweight+sweight+vweight+shell_weight+rings, data=moll)
mode(moll)
df<-data.frame(moll)
mode(df)
df[1]
View(moll)
View(df)
mode(df[1])
x<-1
mode(x)
class(x)
class(df)
class(df[1])
z=4
f=function(x=sqrt(z)) {
print(x)
}
f()
z=16
f()
rm(z)
f()
note <- read.table("data_banknote_authentication.txt",sep=",")
getwd()
note <- read.table("data/data_banknote_authentication.txt",sep=",")
colnames(note) <- c("var","skew","kurt","entropy","class")
# read in data
moll <- read.table("data/abalone.data",sep=",")
# name attributes
colnames(moll) <- c("sex","length","diameter","height","wweight","sweight","vweight","shell_weight","rings")
summary(moll)
library(GGally)
ggpairs(data=moll, columns=c(9,1), title="Sex")
ggpairs(data=moll, columns=c(9,2), title="Length")
ggpairs(data=moll, columns=c(9,3), title="Diameter")
ggpairs(data=moll, columns=c(9,4), title="Height")
ggpairs(data=moll, columns=c(9,5), title="Whole Weight")
ggpairs(data=moll, columns=c(9,6), title="Shucked Weight")
ggpairs(data=moll, columns=c(9,7), title="Viscera Weight")
ggpairs(data=moll, columns=c(9,8), title="Shell Weight")
View(note)
ggpairs(data=note, columns=c(5,1))
ggpairs(data=note, columns=c(5,2))
str(note)
note$class <- as.factor(note$class)
ggpairs(data=note, columns=c(5,1))
note <- read.table("data/data_banknote_authentication.txt",sep=",")
colnames(note) <- c("var","skew","kurt","entropy","class")
box_var<-ggplot(note, aes(factor(class),var))+geom_boxplot(aes(fill=factor(class)))
library(ggplot2)
box_var<-ggplot(note, aes(factor(class),var))+geom_boxplot(aes(fill=factor(class)))
box_skew<-ggplot(note, aes(factor(class),skew))+geom_boxplot(aes(fill=factor(class)))
box_kurt<-ggplot(note, aes(factor(class),kurt))+geom_boxplot(aes(fill=factor(class)))
box_entropy<-ggplot(note, aes(factor(class),entropy))+geom_boxplot(aes(fill=factor(class)))
grid.arrange(box_var, box_skew, box_kurt, box_entropy, ncol=2, nrow=2)
library(gridExtra)
grid.arrange(box_var, box_skew, box_kurt, box_entropy, ncol=2, nrow=2)
ggpairs(data=note, columns=c(5,1))
ggpairs(data=note, columns=c(1:5))
vars <- c("Variance", "Skewness", "Kurtosis", "Entropy")
for(i in 1:4){
ggpairs(data=note, columns=c(1,i), title=i)
}
# combine all into one ggpairs call
ggpairs(data=note, columns=c(1:5))
# maybe we want to split them out separately but dont want a scalable loop
vars <- c("Variance", "Skewness", "Kurtosis", "Entropy")
for(i in 1:4){
ggpairs(data=note, columns=c(1,i), title=i)
}
# combine all into one ggpairs call
# ggpairs(data=note, columns=c(1:5))
# maybe we want to split them out separately but dont want a scalable loop
vars <- c("Variance", "Skewness", "Kurtosis", "Entropy")
for(i in 1:4){
ggpairs(data=note, columns=c(1,i), title=i)
}
# combine all into one ggpairs call
# ggpairs(data=note, columns=c(1:5))
# maybe we want to split them out separately but dont want a scalable loop
vars <- c("Variance", "Skewness", "Kurtosis", "Entropy")
for(i in 1:4){
ggpairs(data=note, columns=c(5,i), title=i)
}
# combine all into one ggpairs call
# ggpairs(data=note, columns=c(1:5))
# maybe we want to split them out separately but dont want a scalable loop
vars <- c("Variance", "Skewness", "Kurtosis", "Entropy")
for(i in 1:4){
ggpairs(data=note, columns=c(5,i), title=i)
}
# combine all into one ggpairs call
# ggpairs(data=note, columns=c(1:5))
# maybe we want to split them out separately but dont want a scalable loop
vars <- c("Variance", "Skewness", "Kurtosis", "Entropy")
for(i in 1:4){
ggpairs(data=note, columns=c(5,i))
}
# combine all into one ggpairs call
# ggpairs(data=note, columns=c(1:5))
# maybe we want to split them out separately but dont want a scalable loop
vars <- c("Variance", "Skewness", "Kurtosis", "Entropy")
for(i in 1:4){
ggpairs(data=note, columns=c(5,i), title=vars[i])
}
# combine all into one ggpairs call
# ggpairs(data=note, columns=c(1:5))
# maybe we want to split them out separately but dont want a scalable loop
vars <- c("Variance", "Skewness", "Kurtosis", "Entropy")
for(i in 1:4){
ggpairs(data=note, columns=c(5,i), title=vars[i])
}
# combine all into one ggpairs call
# ggpairs(data=note, columns=c(1:5))
# maybe we want to split them out separately but dont want a scalable loop
vars <- c("Variance", "Skewness", "Kurtosis", "Entropy")
for(i in 1:4){
ggpairs(data=note, columns=c(5,i), title=vars[i])
}
ggpairs(data=note, columns = (5,1), title=vars[1])
ggpairs(data=note, columns = c(5,1), title=vars[1])
# combine all into one ggpairs call
# ggpairs(data=note, columns=c(1:5))
# maybe we want to split them out separately but dont want a scalable loop
vars <- c("Variance", "Skewness", "Kurtosis", "Entropy")
for(i in 1:4){
ggpairs(data=note, columns = c(5,i), title=vars[i])
}
# read in data
note <- read.table("data/data_banknote_authentication.txt",sep=",")
# name attributes
colnames(note) <- c("var","skew","kurt","entropy","class")
# basic boxplot
boxplot(note$var)
# read in data
note <- read.table("data/data_banknote_authentication.txt",sep=",")
# name attributes
colnames(note) <- c("var","skew","kurt","entropy","class")
# basic boxplot
boxplot(note$var, title="Variance")
boxplot(note$var, title="Variance")
boxplot(note$var, main="Variance")
boxplot(var~class, data=note, main="Variance over Class")
# load libraries
library(ggplot2)
library(gridExtra)
# boxplots
box_var<-ggplot(note, aes(factor(class),var))+geom_boxplot(aes(fill=factor(class)))
box_skew<-ggplot(note, aes(factor(class),skew))+geom_boxplot(aes(fill=factor(class)))
box_kurt<-ggplot(note, aes(factor(class),kurt))+geom_boxplot(aes(fill=factor(class)))
box_entropy<-ggplot(note, aes(factor(class),entropy))+geom_boxplot(aes(fill=factor(class)))
grid.arrange(box_var, box_skew, box_kurt, box_entropy, ncol=2, nrow=2)
# read in data
note <- read.table("data/data_banknote_authentication.txt",sep=",")
# name attributes
colnames(note) <- c("var","skew","kurt","entropy","class")
# basic boxplot of variance
boxplot(var, data=note, main="Variance")
# read in data
note <- read.table("data/data_banknote_authentication.txt",sep=",")
# name attributes
colnames(note) <- c("var","skew","kurt","entropy","class")
# basic boxplot of variance
boxplot(var, data=note, main="Variance")
# read in data
note <- read.table("data/data_banknote_authentication.txt",sep=",")
# name attributes
colnames(note) <- c("var","skew","kurt","entropy","class")
# basic boxplot of variance
boxplot(note$var, data=note, main="Variance")
# boxplot of variance distributed over each class
boxplot(var~class, data=note, main="Variance over Class")
ggpairs(data=note, columns=c(5,1))
box_var<-ggplot(note, aes(factor(class),var))+geom_boxplot(aes(fill=factor(class)) + theme(axis_title.y=element_blank()))
box_var<-ggplot(note, aes(factor(class),var))+geom_boxplot(aes(fill=factor(class)) + labs(y=Counterfeit,x=Variance))
box_var<-ggplot(note, aes(factor(class),var))+geom_boxplot(aes(fill=factor(class)) + labs(y="Counterfeit",x="Variance"))
box_var<-ggplot(note, aes(factor(class),var))+geom_boxplot(aes(fill=factor(class))) labs(y="Counterfeit",x="Variance")
box_var<-ggplot(note, aes(factor(class),var))+geom_boxplot(aes(fill=factor(class)))+ labs(y="Counterfeit",x="Variance")
box_var<-ggplot(note, aes(factor(class),var))+geom_boxplot(aes(fill=FALSE))+ labs(y="Counterfeit",x="Variance")
box_var<-ggplot(note, aes(factor(class),var))+geom_boxplot(aes(fill=FALSE))+ labs(y="Counterfeit",x="Variance")
box_skew<-ggplot(note, aes(factor(class),skew))+geom_boxplot(aes(fill=FALSE))+ labs(y="Counterfeit",x="Skewness")
box_kurt<-ggplot(note, aes(factor(class),kurt))+geom_boxplot(aes(fill=FALSE))+ labs(y="Counterfeit",x="Kurtosis")
box_entropy<-ggplot(note, aes(factor(class),entropy))+geom_boxplot(aes(fill=FALSE))+ labs(y="Counterfeit",x="Entropy")
grid.arrange(box_var, box_skew, box_kurt, box_entropy, ncol=2, nrow=2)
# boxplots
box_var<-ggplot(note, aes(factor(class),var))+geom_boxplot(aes(fill=factor(class)))+ labs(x="",y="Variance")
box_skew<-ggplot(note, aes(factor(class),skew))+geom_boxplot(aes(fill=factor(class)))+ labs(x="",y="Skewness")
box_kurt<-ggplot(note, aes(factor(class),kurt))+geom_boxplot(aes(fill=factor(class)))+ labs(x="",y="Kurtosis")
box_entropy<-ggplot(note, aes(factor(class),entropy))+geom_boxplot(aes(fill=factor(class)))+ labs(x="",y="Entropy")
# arrange in a 2x2 grid
grid.arrange(box_var, box_skew, box_kurt, box_entropy, ncol=2, nrow=2)
# boxplots
box_var<-ggplot(note, aes(factor(class),var))+geom_boxplot(aes(fill=factor(class)))+ labs(x="",y="Variance") + theme(legend.position="none")
box_skew<-ggplot(note, aes(factor(class),skew))+geom_boxplot(aes(fill=factor(class)))+ labs(x="",y="Skewness") + theme(legend.position="none")
box_kurt<-ggplot(note, aes(factor(class),kurt))+geom_boxplot(aes(fill=factor(class)))+ labs(x="",y="Kurtosis") + theme(legend.position="none")
box_entropy<-ggplot(note, aes(factor(class),entropy))+geom_boxplot(aes(fill=factor(class)))+ labs(x="",y="Entropy") + theme(legend.position="none")
# arrange in a 2x2 grid
grid.arrange(box_var, box_skew, box_kurt, box_entropy, ncol=2, nrow=2)
ggpairs(data=note, columns=c(5,1))
# convert class to a factor
note$class <- as.factor(note$class)
# ggpairs
ggpairs(data=note, columns=c(5,1))
ggpairs(data=note, columns=c(5,2))
ggpairs(data=note, columns=c(5,3))
ggpairs(data=note, columns=c(5,4))
ggpairs(data=note, columns=c(1,5))
ggpairs(data=note, columns=c(1,5))
# read in data
note <- read.table("data/data_banknote_authentication.txt",sep=",")
# name attributes
colnames(note) <- c("var","skew","kurt","entropy","class")
# basic boxplot of variance
boxplot(note$var, data=note, main="Variance")
# boxplot of variance distributed over each class
boxplot(var~class, data=note, main="Variance over Class")
getwd()
View(note)
setwd("~/github/r_code")
# read in data
note <- read.table("data/data_banknote_authentication.txt",sep=",")
# name attributes
colnames(note) <- c("var","skew","kurt","entropy","class")
# basic boxplot of variance
boxplot(note$var, data=note, main="Variance")
# boxplot of variance distributed over each class
boxplot(var~class, data=note, main="Variance over Class")
# load libraries
library(ggplot2)
library(gridExtra)
# boxplots
box_var<-ggplot(note, aes(factor(class),var))+geom_boxplot(aes(fill=factor(class)))
box_skew<-ggplot(note, aes(factor(class),skew))+geom_boxplot(aes(fill=factor(class)))
box_kurt<-ggplot(note, aes(factor(class),kurt))+geom_boxplot(aes(fill=factor(class)))
box_entropy<-ggplot(note, aes(factor(class),entropy))+geom_boxplot(aes(fill=factor(class)))
# arrange in a 2x2 grid
grid.arrange(box_var, box_skew, box_kurt, box_entropy, ncol=2, nrow=2)
# boxplots
box_var<-ggplot(note, aes(factor(class),var))+geom_boxplot(aes(fill=factor(class)))+ labs(x="",y="Variance") + theme(legend.position="none")
box_skew<-ggplot(note, aes(factor(class),skew))+geom_boxplot(aes(fill=factor(class)))+ labs(x="",y="Skewness") + theme(legend.position="none")
box_kurt<-ggplot(note, aes(factor(class),kurt))+geom_boxplot(aes(fill=factor(class)))+ labs(x="",y="Kurtosis") + theme(legend.position="none")
box_entropy<-ggplot(note, aes(factor(class),entropy))+geom_boxplot(aes(fill=factor(class)))+ labs(x="",y="Entropy") + theme(legend.position="none")
# arrange in a 2x2 grid
grid.arrange(box_var, box_skew, box_kurt, box_entropy, ncol=2, nrow=2)
# variance of class
ggpairs(data=note, columns=c(1,5))
# convert class to a factor
note$class <- as.factor(note$class)
# ggpairs
ggpairs(data=note, columns=c(1,5))
ggpairs(data=note, columns=c(2,5))
ggpairs(data=note, columns=c(3,5))
ggpairs(data=note, columns=c(4,5))
# combine all into one ggpairs call
ggpairs(data=note, columns=c(1:5))
# maybe we want to split them out separately but dont want a scalable loop
vars <- c("Variance", "Skewness", "Kurtosis", "Entropy")
for(i in 1:4){
ggpairs(data=note, columns = c(5,i), title=vars[i])
}
# combine all into one ggpairs call
ggpairs(data=note, columns=c(1:5))
# maybe we want to split them out separately but dont want a scalable loop
vars <- c("Variance", "Skewness", "Kurtosis", "Entropy")
for(i in 1:4){
ggpairs(data=note, columns = c(i,5), title=vars[i])
}
# combine all into one ggpairs call
ggpairs(data=note, columns=c(1:5))
# maybe we want to split them out separately but dont want a scalable loop
vars <- c("Variance", "Skewness", "Kurtosis", "Entropy")
for(i in 1:4){
ggpairs(data=note, columns = c(i,5), title=vars[i])
i+=1
# combine all into one ggpairs call
ggpairs(data=note, columns=c(1:5))
# maybe we want to split them out separately but dont want a scalable loop
vars <- c("Variance", "Skewness", "Kurtosis", "Entropy")
for(i in 1:4){
ggpairs(data=note, columns = c(i,5), title=vars[i])
i=i+1
}
# read in data
note <- read.table("data/data_banknote_authentication.txt",sep=",")
# name attributes
colnames(note) <- c("var","skew","kurt","entropy","class")
# basic boxplot of variance
boxplot(note$var, data=note, main="Variance")
# boxplot of variance distributed over each class
boxplot(var~class, data=note, main="Variance over Class")
# load libraries
library(ggplot2)
library(gridExtra)
# boxplots
box_var<-ggplot(note, aes(factor(class),var))+geom_boxplot(aes(fill=factor(class)))
box_skew<-ggplot(note, aes(factor(class),skew))+geom_boxplot(aes(fill=factor(class)))
box_kurt<-ggplot(note, aes(factor(class),kurt))+geom_boxplot(aes(fill=factor(class)))
box_entropy<-ggplot(note, aes(factor(class),entropy))+geom_boxplot(aes(fill=factor(class)))
# arrange in a 2x2 grid
grid.arrange(box_var, box_skew, box_kurt, box_entropy, ncol=2, nrow=2)
# boxplots
box_var<-ggplot(note, aes(factor(class),var))+geom_boxplot(aes(fill=factor(class)))+ labs(x="",y="Variance") + theme(legend.position="none")
box_skew<-ggplot(note, aes(factor(class),skew))+geom_boxplot(aes(fill=factor(class)))+ labs(x="",y="Skewness") + theme(legend.position="none")
box_kurt<-ggplot(note, aes(factor(class),kurt))+geom_boxplot(aes(fill=factor(class)))+ labs(x="",y="Kurtosis") + theme(legend.position="none")
box_entropy<-ggplot(note, aes(factor(class),entropy))+geom_boxplot(aes(fill=factor(class)))+ labs(x="",y="Entropy") + theme(legend.position="none")
# arrange in a 2x2 grid
grid.arrange(box_var, box_skew, box_kurt, box_entropy, ncol=2, nrow=2)
# variance of class
ggpairs(data=note, columns=c(1,5))
# convert class to a factor
note$class <- as.factor(note$class)
# ggpairs
ggpairs(data=note, columns=c(1,5))
ggpairs(data=note, columns=c(2,5))
ggpairs(data=note, columns=c(3,5))
ggpairs(data=note, columns=c(4,5))
# combine all into one ggpairs call
ggpairs(data=note, columns=c(1:5))
# combine all into one ggpairs call
ggpairs(data=note, columns=c(1:5))
install.packages("car")
install.packages("quantmod")
library(quantmod)
library(xts)
library(zoo)
library(quantmod)
getSymbols("AAPL", from="1990-01-02" )
View(AAPL)
chartSeries(AAPL)
chartSeries(AAPL$Adjusted)
chartSeries(AAPL, use.Adjusted=TRUE)
library(ggplot2)
library(ISLR)
library(car)
knitr::opts_chunk$set(echo = TRUE)
abaDat <- read.table("abalone.data",sep=",")
colnames(abaDat) <- c("sex","len","diam","h","ww","sw","vw","sh","rings")
abaDat$age <- abaDat$rings+1.5
dim(abaDat)
lm(len~daim+h,abaDat)
lm(len~diamm+h,abaDat)
lm(len~diam+h,abaDat)
summary(lm(len~diam+h,abaDat))
summary(lm(len~diam,abaDat))
plot(abaDat[,c("diam","len")])
abline(lm(len~diam,abaDat))
plot(lm(len~diam,abaDat))
is.na(abaDat)
len(is.na(abaDat))
length(is.na(abaDat))
length(is.na(abaDat)==T)
length(is.na(abaDat)==F)
length(is.na(abaDat)[T])
length(is.na(abaDat)[F])
sapply(abaDat, function(x) sum(is.na(x)))
cor(abaDat,method="spearman")
cor(abaDat,use="complete.obs",method="spearman")
cor(abaDat, use="complete.obs", method="kendall")
mode(abaDat)
cor(abaDat, use="pairwise.complete.obs", method="kendall")
View(abaDat)
cor(abaDat[2:ncols(abaDat),],method="spearman")
cor(abaDat[2:n_cols(abaDat),],method="spearman")
cor(abaDat[2:ncol(abaDat),],method="spearman")
cor(abaDat[,2:5],method="spearman")
cor(abaDat[,2:ncol(abaDat)],method="spearman")
install.packages("corrplot")
library(corrplot)
corrplot(abaDat[,2:ncol(abaDat)])
corrplot(abaDat[,2:4])
scor <- cor(abaDat[,2:ncol(abaDat)],method="spearman")
scor
corrplot.mixed(scor,method)
corrplot(scor)
corrplot.mixed(scor)
pcor <- cor(abaDat[,2:ncol(abaDat)],method="pearson")
pcor
corrplot.mixed(pcor)
corrplot.mixed(scor)
library(corrplot)
# get spearman correlations
scor <- cor(abaDat[,2:ncol(abaDat)],method="spearman")
scor
# visualize
corrplot.mixed(scor)
# get pearson correlations
pcor <- cor(abaDat[,2:ncol(abaDat)],method="pearson")
pcor
# visualize
corrplot.mixed(pcor)
results <- lm(age~sw,data = "abaDat")
results <- lm(age~sw,"abaDat")
results <- lm(age~sw,abaDat)
fit <- lm(age~sw,abaDat)
summary(fit)
summary.fit
summary(fit)
r2<-summary(fit)$r.squared
rse<-summary(fit)$rse
rse<-summary(fit)$sigma^2
rse
rse<-summary(fit)$se
rse
rse<-summary(fit)$sigma
r2<-round(summary(fit)$r.squared,2)
r2
summary(abaDat$sh)
plot(age,sh,data=abaDat)
plot(abaDat$age,abaDat$sh)
plot(abaDat$age,abaDat$sh,ytitle="Shell Weight")
plot(abaDat$age,abaDat$sh,y-title="Shell Weight")
plot(abaDat$age,abaDat$sh,ylab="Shell Weight")
plot(abaDat$sh,abaDat$age,xlab="Shell Weight",ylab="Age")
abline(fit,col="red")
plot(abaDat$sh,abaDat$age,xlab="Shell Weight",ylab="Age")
fit <- lm(age~sh,abaDat)
abline(fit,col="red")
abline(lm(age~sh,abaDat),col="red")
abline(fit,col="red")
plot(abaDat$sh,abaDat$age,xlab="Shell Weight",ylab="Age")
abline(fit,col="red")
# scatterplot with fitted line
plot(abaDat$sh,abaDat$age,xlab="Shell Weight",ylab="Age")
abline(fit,col="red")
plot(fit)
confint(fit)
predict(fit, c(0.1,0.2,0.3))
predict(fit, c(0.1,0.2,0.3), interval="prediction")
predict(fit, newdata=c(0.1,0.2,0.3), interval="prediction")
new.vals <- data.frame(x=c(0.1,0.2,0.3))
predict(fit, newdata=new.vals, interval="prediction")
fit <- lm(age~sh,abaDat)
new.vals <- data.frame(x=c(0.1,0.2,0.3))
predict(fit, newdata=new.vals, interval="prediction")
new.vals <- data.frame(sh=c(0.1,0.2,0.3))
predict(fit, newdata=new.vals, interval="prediction")
predict(fit, newdata=new.vals, interval="confidence")
predict(fit, newdata=new.vals, interva="prediction")
# new values
new.vals <- data.frame(sh=c(0.1,0.2,0.3))
# confidence intervals for new values
predict(fit, newdata=new.vals, interval="confidence")
# prediction intervals for new values
predict(fit, newdata=new.vals, interva="prediction")
fit_log<-lm(age~log(sh))
fit_log<-lm(age~log(sh),abaDat)
summary(fit_log)
summary(log(abaDat$sh))
summary(log(abaDat$age))
# diagnostic plots
par(mfrow=c(2,2))
plot(fit_log)
(fit_log)
plot(fit_log)
fit_log<-lm(log(age)~log(sh),abaDat)
plot(fit_log)
summary(log(abaDat$age))
summary(log(abaDat$sh))
log_mfit<-lm(log(age)~log(sh)+log(sw),abaDat)
summary(log_mfit)
confint(log_mfit)
plot(log_mfit)
